Subject: Detect selinux support and label files as needed
--- /dev/null
+++ b/debian/patches/relabeling-need.patch
@@ -0,0 +1,40 @@
+--- a/internal/distro/distro.go
++++ b/internal/distro/distro.go
+@@ -16,6 +16,7 @@
+ 
+ import (
+ 	"fmt"
++	"github.com/opencontainers/selinux/go-selinux"
+ 	"os"
+ )
+ 
+@@ -66,7 +67,7 @@
+ 	kargsCmd = "ignition-kargs-helper"
+ 
+ 	// Flags
+-	selinuxRelabel  = "true"
++	selinuxEnabled  *bool
+ 	blackboxTesting = "false"
+ 	// writeAuthorizedKeysFragment indicates whether to write SSH keys
+ 	// specified in the Ignition config as a fragment to
+@@ -117,7 +118,7 @@
+ func LuksRealRootKeyFilePath() string { return luksRealRootKeyFilePath }
+ func ResultFilePath() string          { return resultFilePath }
+ 
+-func SelinuxRelabel() bool  { return bakedStringToBool(selinuxRelabel) && !BlackboxTesting() }
++func SelinuxRelabel() bool  { return selinuxRelabelNeed() && !BlackboxTesting() }
+ func BlackboxTesting() bool { return bakedStringToBool(blackboxTesting) }
+ func WriteAuthorizedKeysFragment() bool {
+ 	return bakedStringToBool(fromEnv("WRITE_AUTHORIZED_KEYS_FRAGMENT", writeAuthorizedKeysFragment))
+@@ -142,3 +143,11 @@
+ 		panic(fmt.Sprintf("value '%s' cannot be interpreted as a boolean", s))
+ 	}
+ }
++
++func selinuxRelabelNeed() bool {
++	if selinuxEnabled == nil {
++		selinuxEnabled = new(bool)
++		*selinuxEnabled = selinux.GetEnabled()
++	}
++	return *selinuxEnabled
++}
